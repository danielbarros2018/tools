####################################################################################
##
## Colocar Git Branch no pronpt do bash.
##
####################################################################################

# Obtem o nome da branch
function parse_git_branch_optimized() {
    local branch_name=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [[ $? -eq 0 && -n "$branch_name" ]]; then
        if [[ "$branch_name" == "HEAD" ]]; then
            echo "(detached-HEAD)"
        else
            echo "$branch_name"
        fi
    fi
}

# Verifica o status de alterações locais no Git
function has_local_changes() {
    local git_status_output=$(git status --porcelain 2>/dev/null)
    if [[ -n "$git_status_output" ]]; then
        return 0 # Com alterações
    else
        return 1 # Sem alterações
    fi
}

# Formata e colore o nome da branch com base nas regras
function get_git_prompt_status() {
    local branch_name=$(parse_git_branch_optimized)
    
    # Definindo códigos de cor
    local red_fg='\033[01;31m'
    local green_fg='\033[01;32m'
    local white_fg='\033[01;37m'
    local red_bg='\033[41m'
    local green_bg='\033[42m'
    local reset_color='\033[0m'
    
    local prompt_color_start='\001' 
    local prompt_color_end='\002'   

    if [[ -n "$branch_name" ]]; then
        local paren_color=""
        local branch_text_color=""
        local branch_bg_color=""
        local extra_status=""

        case "$branch_name" in
            master|main|trunk|root|prod|production)
                paren_color="$red_fg"        # Parênteses vermelhos
                branch_text_color="$red_fg"  # Texto da branch vermelho
                ;;
            *)
                paren_color="$green_fg"      # Parênteses verdes
                branch_text_color="$green_fg" # Texto da branch verde
                ;;
        esac

        local status_output=$(git status --porcelain -b 2>/dev/null)
        local ahead_count=0
        local behind_count=0
        local untracked_count=0

        if [[ -n "$status_output" ]]; then
            # Parsing para ahead/behind (linha que começa com ##)
            if [[ "$status_output" =~ \#\#\ .*\ \[ahead\ ([0-9]+)\] ]]; then
                ahead_count="${BASH_REMATCH[1]}"
            elif [[ "$status_output" =~ \#\#\ .*\ \[behind\ ([0-9]+)\] ]]; then
                behind_count="${BASH_REMATCH[1]}"
            elif [[ "$status_output" =~ \#\#\ .*\ \[ahead\ ([0-9]+),\ behind\ ([0-9]+)\] ]]; then
                ahead_count="${BASH_REMATCH[1]}"
                behind_count="${BASH_REMATCH[2]}"
            fi

            # Contagem de arquivos untracked (linhas que começam com '??')
            untracked_count=$(git ls-files --others | wc -l)
        fi

        if [[ "$ahead_count" -gt 0 ]]; then
            extra_status+=" ${prompt_color_start}${white_fg}${prompt_color_end}↑${ahead_count}${prompt_color_start}${reset_color}${prompt_color_end}"
        fi
        if [[ "$behind_count" -gt 0 ]]; then
            extra_status+=" ${prompt_color_start}${white_fg}${prompt_color_end}↓${behind_count}${prompt_color_start}${reset_color}${prompt_color_end}"
        fi
        if [[ "$untracked_count" -gt 0 ]]; then
            extra_status+=" ${prompt_color_start}${white_fg}${prompt_color_end}?${untracked_count}${prompt_color_start}${reset_color}${prompt_color_end}"
        fi

        if has_local_changes; then
            branch_text_color="$white_fg" # Texto da branch vira branco
            
            case "$branch_name" in
                master|main|trunk|root|prod|production)
                    branch_bg_color="$red_bg" # Fundo vermelho para master com alterações
                    ;;
                *)
                    branch_bg_color="$green_bg" # Fundo verde para outras branches com alterações
                    ;;
            esac
        fi
        
        echo -e "${prompt_color_start}${paren_color}${prompt_color_end} ("\
"${prompt_color_start}${reset_color}${branch_bg_color}${branch_text_color}${prompt_color_end}${branch_name}${extra_status}"\
"${prompt_color_start}${reset_color}${paren_color}${prompt_color_end}) "
    else
        echo -n ""
    fi
}

export PS1="${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\$(get_git_prompt_status)\[\033[00m\]\$ "

####################################################################################